apply plugin: 'java-library'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.kotlin.kapt'

sourceSets.test.java {
  srcDir file("$buildDir/dagger-upstream")
}

test.filter {
  // dagger-reflect does not produce the exact same behavior as dagger-compiler for @Reusable.
  excludeTest 'dagger.functional.ReusableTest', null

  // TODO reflect bug! Need something like ByteBuddy for proxying classes at runtime.
  excludeTest 'dagger.functional.aot.PrunedFrameworkInstanceWithModuleInstanceTest', 'prunedBindingWithModuleInstance_doesntThrowDuringInitialization'
  excludeTest 'dagger.functional.builder.BuilderBindsInstanceParameterTest', null
  excludeTest 'dagger.functional.builderbinds.BuilderBindsTest', null
  excludeTest 'dagger.functional.factory.FactoryBindsInstanceTest', null
  excludeTest 'dagger.functional.factory.FactoryDependenciesTest', null
  excludeTest 'dagger.functional.factory.FactoryImplicitModulesTest', null
  excludeTest 'dagger.functional.factory.FactoryMixedParametersTest', null
  excludeTest 'dagger.functional.factory.FactoryRequiredModulesTest', null
  excludeTest 'dagger.functional.factory.SubcomponentFactoryTest', null
  excludeTest 'dagger.functional.subcomponent.SubcomponentTest', null
  excludeTest 'dagger.functional.subcomponent.repeat.RepeatedModuleTest', null
  excludeTest 'dagger.functional.BasicTest', null
  excludeTest 'dagger.functional.ComponentDependenciesTest', null

  // TODO reflect bug! Generics don't work well.
  excludeTest 'dagger.functional.GenericTest', 'complexGenerics'
  excludeTest 'dagger.functional.GenericTest', 'genericModules'
  excludeTest 'dagger.functional.GenericTest', 'membersInjections'
  excludeTest 'dagger.functional.GenericTest', 'noDepsGenerics'
  excludeTest 'dagger.functional.GenericTest', 'packagePrivateTypeParameterDependencies'
  excludeTest 'dagger.functional.GenericTest', 'publicSubclassWithPackagePrivateTypeParameterOfSuperclass'
  excludeTest 'dagger.functional.GenericTest', 'testGenericComponentCreate'
  excludeTest 'dagger.functional.GenericTest', 'testGenericDoubleReferences'
  excludeTest 'dagger.functional.GenericTest', 'testGenericSimpleReferences'
  excludeTest 'dagger.functional.binds.BindsTest', 'bindDelegates'
  excludeTest 'dagger.functional.binds.BindsTest', 'bindWithScope'

  // TODO reflect bug! Something with multibindings and subcomponents.
  excludeTest 'dagger.functional.aot.MapFrameworkInstanceWithContributionsInMultipleImplementationsTest', 'mapFactoryCanBeInstantiatedAcrossComponentImplementations'
  excludeTest 'dagger.functional.subcomponent.pruning.SubcomponentOnlyRequestedBySiblingTest', 'subcomponentAddedInParent_onlyUsedInSibling'
  excludeTest 'dagger.functional.subcomponent.ModuleWithSubcomponentsTest', null

  // TODO reflect bug! Injecting Optional<Provides<T>> does not work.
  excludeTest 'dagger.functional.guava.OptionalBindingComponentsAbsentTest', null
  excludeTest 'dagger.functional.guava.OptionalBindingComponentsPresentTest', null
  excludeTest 'dagger.functional.jdk8.OptionalBindingComponentsEmptyTest', null
  excludeTest 'dagger.functional.jdk8.OptionalBindingComponentsPresentTest', null

  // TODO reflect bug! Injecting MembersInjector<T> does not work.
  excludeTest 'dagger.functional.NestedTest', 'nestedBar'

  // TODO reflect bug! Map<Key, Provider<Value>> cycles do not work.
  excludeTest 'dagger.functional.cycle.CycleTest', 'providerMapIndirectionCycle'

  // TODO reflect bug! Subcomponent multibindings propagation does not work.
  excludeTest 'dagger.functional.subcomponent.SubcomponentMultibindingsTest', null
}

dependencies {
  testImplementation deps.kotlin.stdlib
  testImplementation project(':reflect')
  testImplementation deps.junit
  testImplementation deps.truth
  testImplementation deps.auto.value.annotations
  testImplementation deps.auto.factory // TODO https://github.com/google/auto/issues/631
  kaptTest project(':reflect-compiler')
  kaptTest deps.auto.value.compiler
  kaptTest deps.auto.factory
}

def ensureDaggerSubmodule = tasks.create('ensureDaggerSubmodule') {
  doFirst {
    if (!file('dagger/.git').exists()) {
      throw new RuntimeException(
          "Missing 'dagger' git submodule clone. Did you run 'git submodule update --init'?")
    }
    def describe = 'git describe'.execute(null, file('dagger'))
    if (describe.waitFor() != 0) {
      System.err.println(describe.errorStream.text)
      throw new RuntimeException("Could not run 'git describe' in 'dagger' git submodule clone")
    }
    def expectedTag = "dagger-${versions.dagger}"
    if (expectedTag != describe.inputStream.text.trim()) {
      throw new RuntimeException(
          "Wrong tag checked out for 'dagger' git submodule clone. Should be '$expectedTag'.")
    }
  }
}

task deleteUpstream(type: Delete) {
  delete("$buildDir/dagger-upstream")
}

task copyDaggerUpstream(type: Copy) {
  from("dagger/javatests/dagger") {
    include 'functional/**'

    exclude 'functional/producers/**'
    exclude 'functional/tck/**'
    exclude 'functional/spi/**'
    exclude 'functional/guava/**'

    // These tests contains a reference to a generated types directly.
    exclude 'functional/gwt/GwtIncompatiblesTest.java'
    exclude 'functional/membersinject/MembersInjectTest.java'
    exclude 'functional/NeedsProviderOfFactory.java'
    exclude 'functional/NeedsFactory.java'
    exclude 'functional/ComponentSupertypeDependsOnGeneratedCodeInterface.java'
    exclude 'functional/ComponentSupertypeDependsOnGeneratedCode.java'
    exclude 'functional/ComponentDependsOnGeneratedCode.java'
    exclude 'functional/DependsOnGeneratedCodeTest.java'

    // This test reflects on the generated component implementation fields.
    exclude 'functional/staticprovides/StaticProvidesTest.java'

    // TODO reflect-compiler bug! Not generating builder method.
    exclude 'functional/builder/BuilderTest.java'
    exclude 'functional/cycle/DoubleCheckCycleTest.java'
    exclude 'functional/membersinject/MembersInjectionOrderingTest.java'
    exclude 'functional/nullables/NullabilityTest.java'
    exclude 'functional/MultibindingTest.java'
    exclude 'functional/NonComponentDependencyTest.java'
  }
  into "$buildDir/dagger-upstream/dagger/"
}

afterEvaluate {
  copyDaggerUpstream.dependsOn(deleteUpstream)
  kaptTestKotlin.dependsOn(copyDaggerUpstream)
  kaptTestKotlin.dependsOn(ensureDaggerSubmodule)
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}
